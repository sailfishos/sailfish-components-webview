import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable -nocomposites Sailfish.WebView 1.0 --output-fd 3'

Module {
    dependencies: [
        "Amber.Mpris 1.0",
        "MeeGo.QOfono 0.2",
        "Nemo.Configuration 1.0",
        "Nemo.FileManager 1.0",
        "Nemo.KeepAlive 1.2",
        "Nemo.Notifications 1.0",
        "Nemo.Policy 1.0",
        "Nemo.Thumbnailer 1.0",
        "QtDocGallery 5.0",
        "QtGraphicalEffects 1.0",
        "QtGraphicalEffects.private 1.0",
        "QtMultimedia 5.6",
        "QtQml 2.2",
        "QtQml.Models 2.2",
        "QtQuick 2.6",
        "QtQuick.Window 2.1",
        "Sailfish.Ambience 1.0",
        "Sailfish.FileManager 1.0",
        "Sailfish.Gallery 1.0",
        "Sailfish.Gallery.private 1.0",
        "Sailfish.Media 1.0",
        "Sailfish.Pickers 1.0",
        "Sailfish.Share 1.0",
        "Sailfish.Silica 1.0",
        "Sailfish.Silica.Background 1.0",
        "Sailfish.Silica.private 1.0",
        "Sailfish.WebEngine 1.0",
        "Sailfish.WebView.Controls 1.0",
        "Sailfish.WebView.Pickers 1.0",
        "Sailfish.WebView.Popups 1.0",
        "org.nemomobile.systemsettings 1.0"
    ]
    Component {
        name: "QuickMozView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "privateMode"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation" }
        Property { name: "viewportWidth"; type: "float" }
        Property { name: "viewportHeight"; type: "float" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "canGoBack"; type: "bool"; isReadonly: true }
        Property { name: "canGoForward"; type: "bool"; isReadonly: true }
        Property { name: "loadProgress"; type: "int"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "contentRect"; type: "QRectF"; isReadonly: true }
        Property { name: "contentWidth"; type: "float"; isReadonly: true }
        Property { name: "contentHeight"; type: "float"; isReadonly: true }
        Property { name: "scrollableSize"; type: "QSizeF"; isReadonly: true }
        Property { name: "scrollableOffset"; type: "QPointF"; isReadonly: true }
        Property { name: "atXBeginning"; type: "bool"; isReadonly: true }
        Property { name: "atXEnd"; type: "bool"; isReadonly: true }
        Property { name: "atYBeginning"; type: "bool"; isReadonly: true }
        Property { name: "atYEnd"; type: "bool"; isReadonly: true }
        Property { name: "resolution"; type: "float"; isReadonly: true }
        Property { name: "painted"; type: "bool"; isReadonly: true }
        Property { name: "backgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Property { name: "moving"; type: "bool"; isReadonly: true }
        Property { name: "pinching"; type: "bool"; isReadonly: true }
        Property {
            name: "verticalScrollDecorator"
            type: "QMozScrollDecorator"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "horizontalScrollDecorator"
            type: "QMozScrollDecorator"
            isReadonly: true
            isPointer: true
        }
        Property { name: "chrome"; type: "bool" }
        Property { name: "chromeGestureEnabled"; type: "bool" }
        Property { name: "chromeGestureThreshold"; type: "float" }
        Property { name: "security"; type: "QMozSecurity"; isReadonly: true; isPointer: true }
        Property { name: "desktopMode"; type: "bool" }
        Property { name: "parentId"; type: "int"; isReadonly: true }
        Property { name: "uniqueId"; type: "int"; isReadonly: true }
        Property { name: "httpUserAgent"; type: "string" }
        Property { name: "domContentLoaded"; type: "bool"; isReadonly: true }
        Signal {
            name: "setIsActive"
            Parameter { type: "bool" }
        }
        Signal { name: "followItemGeometryChanged" }
        Signal { name: "viewInitialized" }
        Signal { name: "viewDestroyed" }
        Signal { name: "windowCloseRequested" }
        Signal {
            name: "recvAsyncMessage"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
        }
        Signal {
            name: "recvSyncMessage"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
            Parameter { name: "response"; type: "QMozReturnValue"; isPointer: true }
        }
        Signal { name: "loadRedirect" }
        Signal {
            name: "securityChanged"
            Parameter { name: "status"; type: "string" }
            Parameter { name: "state"; type: "uint" }
        }
        Signal {
            name: "firstPaint"
            Parameter { name: "offx"; type: "int" }
            Parameter { name: "offy"; type: "int" }
        }
        Signal { name: "viewAreaChanged" }
        Signal {
            name: "handleLongTap"
            Parameter { name: "point"; type: "QPoint" }
            Parameter { name: "retval"; type: "QMozReturnValue"; isPointer: true }
        }
        Signal {
            name: "handleSingleTap"
            Parameter { name: "point"; type: "QPoint" }
            Parameter { name: "retval"; type: "QMozReturnValue"; isPointer: true }
        }
        Signal {
            name: "handleDoubleTap"
            Parameter { name: "point"; type: "QPoint" }
            Parameter { name: "retval"; type: "QMozReturnValue"; isPointer: true }
        }
        Signal {
            name: "imeNotification"
            Parameter { name: "state"; type: "int" }
            Parameter { name: "open"; type: "bool" }
            Parameter { name: "cause"; type: "int" }
            Parameter { name: "focusChange"; type: "int" }
            Parameter { name: "type"; type: "string" }
        }
        Signal { name: "dynamicToolbarHeightChanged" }
        Signal { name: "marginsChanged" }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "loadText"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "mimeType"; type: "string" }
        }
        Method { name: "goBack" }
        Method { name: "goForward" }
        Method { name: "stop" }
        Method { name: "reload" }
        Method {
            name: "load"
            Parameter { type: "string" }
        }
        Method {
            name: "sendAsyncMessage"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "variant"; type: "QVariant" }
        }
        Method {
            name: "addMessageListener"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "loadFrameScript"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "newWindow"
            Parameter { name: "url"; type: "string" }
        }
        Method { name: "newWindow" }
        Method { name: "uniqueId"; type: "uint" }
        Method {
            name: "setParentId"
            Parameter { name: "parentId"; type: "uint" }
        }
        Method {
            name: "setParentBrowsingContext"
            Parameter { name: "parentBrowsingContext"; type: "uintptr_t" }
        }
        Method {
            name: "synthTouchBegin"
            Parameter { name: "touches"; type: "QVariant" }
        }
        Method {
            name: "synthTouchMove"
            Parameter { name: "touches"; type: "QVariant" }
        }
        Method {
            name: "synthTouchEnd"
            Parameter { name: "touches"; type: "QVariant" }
        }
        Method { name: "suspendView" }
        Method { name: "resumeView" }
        Method {
            name: "setInputMethodHints"
            Parameter { name: "hints"; type: "Qt::InputMethodHints" }
        }
        Method {
            name: "scrollTo"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "scrollBy"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "runJavaScript"
            Parameter { name: "script"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "errorCallback"; type: "QJSValue" }
        }
        Method {
            name: "runJavaScript"
            Parameter { name: "script"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "runJavaScript"
            Parameter { name: "script"; type: "string" }
        }
    }
    Component {
        name: "SailfishOS::WebView::RawWebView"
        defaultProperty: "data"
        prototype: "QuickMozView"
        exports: ["Sailfish.WebView/RawWebView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "virtualKeyboardMargin"; type: "float" }
        Property { name: "footerMargin"; type: "float" }
        Property { name: "_acceptTouchEvents"; type: "bool" }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal { name: "acceptTouchEventsChanged" }
        Signal { name: "openUrlInNewWindow" }
    }
}
