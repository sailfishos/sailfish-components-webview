import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable -nocomposites Sailfish.WebView.Controls 1.0 --output-fd 3'

Module {
    dependencies: [
        "MeeGo.QOfono 0.2",
        "Nemo.Configuration 1.0",
        "Nemo.Thumbnailer 1.0",
        "QtQml.Models 2.2",
        "QtQuick 2.6",
        "QtQuick.Window 2.1",
        "Sailfish.Silica 1.0",
        "Sailfish.Silica.Background 1.0",
        "Sailfish.Silica.private 1.0",
        "Sailfish.WebEngine 1.0"
    ]
    Component {
        name: "PermissionFilterProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["Sailfish.WebView.Controls/PermissionFilterProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "permissionType"; type: "string" }
        Property { name: "onlyPermanent"; type: "bool" }
        Signal {
            name: "permissionTypeChanged"
            Parameter { name: "permissionType"; type: "string" }
        }
        Signal {
            name: "onlyPermanentChanged"
            Parameter { name: "onlyPermanent"; type: "bool" }
        }
        Method {
            name: "add"
            Parameter { name: "host"; type: "string" }
            Parameter { name: "type"; type: "string" }
            Parameter { name: "capability"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "host"; type: "string" }
            Parameter { name: "type"; type: "string" }
            Parameter { name: "capability"; type: "int" }
        }
        Method {
            name: "setCapability"
            Parameter { name: "currentIndex"; type: "int" }
            Parameter { name: "capability"; type: "int" }
        }
    }
    Component {
        name: "PermissionManager"
        prototype: "QObject"
        exports: ["Sailfish.WebView.Controls/PermissionManager 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Capability"
            values: {
                "Unknown": 0,
                "Allow": 1,
                "Deny": 2,
                "Prompt": 3
            }
        }
        Enum {
            name: "Expiration"
            values: {
                "Never": 0,
                "Session": 1,
                "Time": 2
            }
        }
        Method {
            name: "add"
            Parameter { name: "host"; type: "string" }
            Parameter { name: "type"; type: "string" }
            Parameter { name: "capability"; type: "Capability" }
            Parameter { name: "expireType"; type: "Expiration" }
        }
        Method {
            name: "add"
            Parameter { name: "host"; type: "string" }
            Parameter { name: "type"; type: "string" }
            Parameter { name: "capability"; type: "Capability" }
        }
        Method { name: "instance" }
    }
    Component {
        name: "PermissionModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.WebView.Controls/PermissionModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "hostChanged"
            Parameter { name: "host"; type: "string" }
        }
        Method {
            name: "add"
            Parameter { name: "host"; type: "string" }
            Parameter { name: "type"; type: "string" }
            Parameter { name: "capability"; type: "int" }
        }
        Method {
            name: "setCapability"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "capability"; type: "int" }
        }
        Method {
            name: "removeAllForPermissionType"
            Parameter { name: "type"; type: "string" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
